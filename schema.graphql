# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  voteForPoll(answerId: ID!): Boolean
  clearVoteForPoll(pollId: ID!): Boolean
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createLabel(data: LabelCreateInput!): Label
  createLabels(data: [LabelCreateInput!]!): [Label]
  updateLabel(where: LabelWhereUniqueInput!, data: LabelUpdateInput!): Label
  updateLabels(data: [LabelUpdateArgs!]!): [Label]
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteLabels(where: [LabelWhereUniqueInput!]!): [Label]
  createPoll(data: PollCreateInput!): Poll
  createPolls(data: [PollCreateInput!]!): [Poll]
  updatePoll(where: PollWhereUniqueInput!, data: PollUpdateInput!): Poll
  updatePolls(data: [PollUpdateArgs!]!): [Poll]
  deletePoll(where: PollWhereUniqueInput!): Poll
  deletePolls(where: [PollWhereUniqueInput!]!): [Poll]
  createPollAnswer(data: PollAnswerCreateInput!): PollAnswer
  createPollAnswers(data: [PollAnswerCreateInput!]!): [PollAnswer]
  updatePollAnswer(
    where: PollAnswerWhereUniqueInput!
    data: PollAnswerUpdateInput!
  ): PollAnswer
  updatePollAnswers(data: [PollAnswerUpdateArgs!]!): [PollAnswer]
  deletePollAnswer(where: PollAnswerWhereUniqueInput!): PollAnswer
  deletePollAnswers(where: [PollAnswerWhereUniqueInput!]!): [PollAnswer]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

type Post {
  id: ID!
  title: String
  image_url: String
  slug: String
  status: String
  publishedDate: String
  author: User
  labels(
    where: LabelWhereInput! = {}
    orderBy: [LabelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Label!]
  labelsCount(where: LabelWhereInput! = {}): Int
  intro: Post_intro_DocumentField
  content: Post_content_DocumentField
}

type Post_intro_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringNullableFilter
  status: StringNullableFilter
  publishedDate: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  publishedDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  image_url: String
  slug: String
  status: String
  publishedDate: String
  author: UserRelateToOneForUpdateInput
  labels: LabelRelateToManyForUpdateInput
  intro: JSON
  content: JSON
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input LabelRelateToManyForUpdateInput {
  disconnect: [LabelWhereUniqueInput!]
  set: [LabelWhereUniqueInput!]
  create: [LabelCreateInput!]
  connect: [LabelWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  image_url: String
  slug: String
  status: String
  publishedDate: String
  author: UserRelateToOneForCreateInput
  labels: LabelRelateToManyForCreateInput
  intro: JSON
  content: JSON
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input LabelRelateToManyForCreateInput {
  create: [LabelCreateInput!]
  connect: [LabelWhereUniqueInput!]
}

type Label {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input LabelWhereUniqueInput {
  id: ID
}

input LabelWhereInput {
  AND: [LabelWhereInput!]
  OR: [LabelWhereInput!]
  NOT: [LabelWhereInput!]
  id: IDFilter
}

input LabelOrderByInput {
  id: OrderDirection
}

input LabelUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input LabelUpdateArgs {
  where: LabelWhereUniqueInput!
  data: LabelUpdateInput!
}

input LabelCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Poll {
  id: ID!
  label: String
  answers(
    where: PollAnswerWhereInput! = {}
    orderBy: [PollAnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollAnswer!]
  answersCount(where: PollAnswerWhereInput! = {}): Int
  responsesCount: Int
  userAnswer: PollAnswer
}

input PollWhereUniqueInput {
  id: ID
}

input PollWhereInput {
  AND: [PollWhereInput!]
  OR: [PollWhereInput!]
  NOT: [PollWhereInput!]
  id: IDFilter
  answers: PollAnswerManyRelationFilter
}

input PollAnswerManyRelationFilter {
  every: PollAnswerWhereInput
  some: PollAnswerWhereInput
  none: PollAnswerWhereInput
}

input PollOrderByInput {
  id: OrderDirection
}

input PollUpdateInput {
  label: String
  answers: PollAnswerRelateToManyForUpdateInput
}

input PollAnswerRelateToManyForUpdateInput {
  disconnect: [PollAnswerWhereUniqueInput!]
  set: [PollAnswerWhereUniqueInput!]
  create: [PollAnswerCreateInput!]
  connect: [PollAnswerWhereUniqueInput!]
}

input PollUpdateArgs {
  where: PollWhereUniqueInput!
  data: PollUpdateInput!
}

input PollCreateInput {
  label: String
  answers: PollAnswerRelateToManyForCreateInput
}

input PollAnswerRelateToManyForCreateInput {
  create: [PollAnswerCreateInput!]
  connect: [PollAnswerWhereUniqueInput!]
}

type PollAnswer {
  id: ID!
  label: String
  poll: Poll
  voteCount: Int
  answeredByUsers(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  answeredByUsersCount(where: UserWhereInput! = {}): Int
}

input PollAnswerWhereUniqueInput {
  id: ID
}

input PollAnswerWhereInput {
  AND: [PollAnswerWhereInput!]
  OR: [PollAnswerWhereInput!]
  NOT: [PollAnswerWhereInput!]
  id: IDFilter
  poll: PollWhereInput
  answeredByUsers: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PollAnswerOrderByInput {
  id: OrderDirection
}

input PollAnswerUpdateInput {
  label: String
  poll: PollRelateToOneForUpdateInput
  answeredByUsers: UserRelateToManyForUpdateInput
}

input PollRelateToOneForUpdateInput {
  create: PollCreateInput
  connect: PollWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PollAnswerUpdateArgs {
  where: PollAnswerWhereUniqueInput!
  data: PollAnswerUpdateInput!
}

input PollAnswerCreateInput {
  label: String
  poll: PollRelateToOneForCreateInput
  answeredByUsers: UserRelateToManyForCreateInput
}

input PollRelateToOneForCreateInput {
  create: PollCreateInput
  connect: PollWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  githubUsername: String
  githubRepos: [GitHubRepo]!
  authoredPosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  authoredPostsCount(where: PostWhereInput! = {}): Int
  pollAnswers(
    where: PollAnswerWhereInput! = {}
    orderBy: [PollAnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollAnswer!]
  pollAnswersCount(where: PollAnswerWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type GitHubRepo {
  id: Int
  name: String
  fullName: String
  htmlUrl: String
  description: String
  createdAt: String
  updatedAt: String
  pushedAt: String
  homepage: String
  size: Int
  stargazersCount: Int
  watchersCount: Int
  language: String
  forksCount: Int
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringNullableFilter
  githubUsername: StringNullableFilter
  authoredPosts: PostManyRelationFilter
  pollAnswers: PollAnswerManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  githubUsername: String
  authoredPosts: PostRelateToManyForUpdateInput
  pollAnswers: PollAnswerRelateToManyForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  githubUsername: String
  authoredPosts: PostRelateToManyForCreateInput
  pollAnswers: PollAnswerRelateToManyForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
}

input RoleOrderByInput {
  id: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForUpdateInput
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  labels(
    where: LabelWhereInput! = {}
    orderBy: [LabelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Label!]
  label(where: LabelWhereUniqueInput!): Label
  labelsCount(where: LabelWhereInput! = {}): Int
  polls(
    where: PollWhereInput! = {}
    orderBy: [PollOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Poll!]
  poll(where: PollWhereUniqueInput!): Poll
  pollsCount(where: PollWhereInput! = {}): Int
  pollAnswers(
    where: PollAnswerWhereInput! = {}
    orderBy: [PollAnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollAnswer!]
  pollAnswer(where: PollAnswerWhereUniqueInput!): PollAnswer
  pollAnswersCount(where: PollAnswerWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
